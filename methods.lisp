(in-package #:x12)
(named-readtables:in-readtable rutils-readtable)

(defmethod initialize-instance ((self trailer) &key &allow-other-keys)
  (call-next-method)
  (unless (slot-boundp self 'count)
    (setf (record-count self) (aref (fields self) 0)))
  (unless (slot-boundp self 'control-id)
    (setf (control-id self) (aref (fields self) 1))))
(defmethod initialize-instance ((self record) &rest initargs
                                &key &allow-other-keys)
  (call-next-method)
  (let* (
         (al (plist-to-alist initargs))
         (field-count (iter
                        (:for cell :in al)
                        (let* ((sym (car cell))
                               (name (symbol-name sym))
                               (num (or (and (typep sym 'keyword)
                                             (char= #\F (char name 0))
                                             (multiple-value-bind (n d)
                                                 (parse-integer name :start 1)
                                               (and (eq d (length name)) n)))
                                        0)
                                 )
                               )
                          (:maximize num)
                          )
                        )
           )
         )
    (setf (fields self)
          (make-array field-count :element-type '(or string octet null)
                      :initial-element nil))
    (iter
      (:for i :from 1 :to field-count)
      (let ((sym (assoc (ensure-keyword i :format "F~d") al))
            )
        (if sym
            (setf (aref (fields self) (1- i))
                  (octets-to-string (cdr sym))))
        )
      )
    )
  )
(defmethod initialize-instance ((self isa) &key interchange-type ack-needed usage-indicator
                                             &allow-other-keys)
  (unless (member interchange-type (list (string-to-octets "00501")) :test 'equalp)
    (error "Invalid interchange type ~a" interchange-type))
  (unless (member ack-needed (list (string-to-octets "0") (string-to-octets "1")) :test 'equalp)
    (error "Invalid acknowledgement-needed ~a must be 0 or 1" ack-needed))
  (unless (member usage-indicator (list (string-to-octets "T")
                                        (string-to-octets "P")) :test 'equalp)
    (error "Invalid usage indicator ~a must be \"T\" or \"P\"" usage-indicator))
  (call-next-method)
  )
(defmethod initialize-instance ((self st) &key f1 f3)
  (with-slots (transmittal-type file-standard) self
    (setf transmittal-type f1 file-standard f3)
    )
  (call-next-method)
  )
(defmethod initialize-instance ((self paired) &key)
  (call-next-method)
  (with-slots (header trailer) self
    (if header (setf (parent header) self))
    (if trailer (setf (parent trailer) self))
    )
  )
(defgeneric child-count (object)
  )
(defmethod child-count ((self paired))
  (length (children self))
  )
(defmethod child-count ((self st/se))
  (+ 2 (call-next-method))
  )
(defmethod print-object ((self paired) stream)
  (with-slots (header children trailer) self
    (format stream "~a~{~a~}~a" header children trailer)
    )
  )
(defmethod print-object ((self trailer) stream)
  (let ((f (coerce-to-char f))
        (r (coerce-to-char r))
        )
    (with-slots (record-type control-id parent) self
      (format stream "~a~c~d~c~a~c" record-type f (child-count parent) f
              control-id r)
      )
    )
  )
(defmethod print-object ((self isa/iea) stream)
  (multiple-value-bind (second minute hour day month year dow dst tz)
      (get-decoded-time)
    (declare (ignorable second dow dst tz))
    (let (
          (s (slot-value self 'subfield-delimiter))
          (f (slot-value self 'field-delimiter))
          (r (slot-value self 'record-delimiter))
          )
      (setf (transmittal-id self)
            (format nil "~d~2,'0d~2,'0d~2,'0d~2,'0d" (mod year 10) month day
                    hour minute)
            (slot-value self 'date)
            (format nil "~4,'0d~2,'0d~2,'0d" year month day)
            (slot-value self 'time) (format nil "~2,'0d~2,'0d" hour minute)
            )
      (call-next-method)
      )
    )
  )
(defun coerce-to-char (c) (if (typep c 'character) c (code-char c)))
(declaim (inline coerce-to-char))
(defmethod print-object ((self record) stream)
   (format stream (fmt "~~a~~{~c~~a~~}~~c"
                       (coerce-to-char f))
           (record-type self) (coerce (fields self) 'list) (coerce-to-char r))
  )
(defmethod print-object ((self isa) stream)
  (let ((f (coerce-to-char f))
        (s (coerce-to-char s))
        (r (coerce-to-char r))
        )
    (with-slots (record-type parent usage-indicator) self
      (with-slots (date time transmittal-id) parent
        (format stream
                "~a~c00~c~14@a00~11a~cZZ~c~15a~cZZ~c~15a~c~a~c~a~c~c~c~a~c0~c~c~c~c~c"
                record-type f f f f f f "16489767" f f "EMDEON" f
                (subseq date 2) f time f s f transmittal-id f f
                (char (octets-to-string usage-indicator) 0) f #\< r)
        )
      )
    )
  )
