(in-package #:x12)
(named-readtables:in-readtable rutils-readtable)

(defclass coded-value ()
  (
   (code :accessor code :initarg :code)
   (value :accessor value :initarg :value)
   )
  )
(defclass record ()
  (
   (record-type :accessor record-type :initarg :type :allocation :class)
   (fields :accessor fields)
   )
  )
(defclass bracket (record)
  (
   (parent :accessor parent)
   )
  )
(defclass header (bracket)
  (
    )
  )
(defclass trailer (bracket)
  (
   (count :accessor record-count :initarg :count)
   (control-id :accessor control-id :initarg :control-id)
   )
  )
(defclass bht (record)
  (
   (record-type :initform "BHT")
   (hl-table :accessor table :initform (make-hash-table :test 'equal))
   )
  )
(defclass hl (record)
  (
   (record-type :initform "HL")
   (parent :accessor parent :initform nil)
   (children :accessor children :initform nil)
   )
  )
(defclass nm1 (record)
  (
   (record-type :initform "NM1")
   )
  )
(defclass per (record)
  (
   (record-type :initform "PER")
   )
  )
(defclass n3 (record)
  (
   (record-type :initform "N3")
   )
  )
(defclass n4 (record)
  (
   (record-type :initform "N4")
   )
  )
(defclass trn (record)
  (
   (record-type :initform "TRN")
   )
  )
(defclass dmg (record)
  (
   (record-type :initform "DMG")
   )
  )
(defclass dtp (record)
  (
   (record-type :initform "DTP")
   )
  )
(defclass eb (record)
  (
   (record-type :initform "EB")
   )
  )
(defclass hsd (record)
  (
   (record-type :initform "HSD")
   )
  )
(defclass msg (record)
  (
   (record-type :initform "MSG")
   )
  )
(defclass ref (record)
  (
   (record-type :initform "REF")
   )
  )
(defclass le (record)
  (
   (record-type :initform "LE")
   )
  )
(defclass ls (record)
  (
   (record-type :initform "LS")
   )
  )
(defclass isa (header)
  (
   (record-type :initform "ISA")
   (authorization-info :accessor authorization-info :initarg :authorization-info)
   (security-info :accessor security-info :initarg :security-info)
   (interchange-sender :accessor interchange-sender :initarg :interchange-sender)
   (interchange-receiver :accessor interchange-receiver :initarg :interchange-receiver)
   (interchange-date :accessor interchange-date :initarg :interchange-date)
   (interchange-time :accessor interchange-time :initarg :interchange-time)
   (interchange-type :accessor interchange-type :initarg :interchange-type)
   (control-id :accessor control-id :initarg :control-id)
   (ack-needed :accessor ack-needed :initarg :ack-needed)
   (usage-indicator :accessor usage-indicator :initarg :usage-indicator)
   )
  )
(defclass iea (trailer)
  (
   (record-type :initform "IEA"))
  )
(defclass gs (header)
  (
   (record-type :initform "GS")
   )
  )
(defclass ge (trailer)
  (
   (record-type :initform "GE"))
  )
(defclass st (header)
  (
   (record-type :initform "ST")
   (transmittal-type :accessor transmittal-type)
   (file-standard :accessor file-standard)
   )
  )
(defclass se (trailer)
  (
   (record-type :initform "SE"))
  )
(defclass paired ()
  (
   (children :accessor children :initarg :children :initform nil)
   (transmittal-id :accessor transmittal-id :initform "")
   (transmittal-id-position :accessor transmittal-id-position
                            :allocation :class)
   (header :accessor header :initarg :header :type 'header)
   (trailer :accessor trailer :initarg :trailer :type 'trailer)
   )
  )
(defclass st/se (paired)
  (
   (transmittal-id-position :initform 2)
   )
  )
(defclass gs/ge (paired)
  (
   (transmittal-id-position :initform 6)
   )
  )
(defclass isa/iea (paired)
  (
   (record-delimiter :accessor record-delimiter :initarg :record-delimiter :initform #\~)
   (field-delimiter :accessor field-delimiter :initarg :field-delimiter :initform #\*)
   (subfield-delimiter :accessor subfield-delimiter :initarg :subfield-delimiter :initform #\^)
   (test-or-prod :accessor test-or-prod :initarg :test-or-prod :initform #\P)
   (date)
   (time)
   (transmittal-id-position :initform 13)
   )
  )
